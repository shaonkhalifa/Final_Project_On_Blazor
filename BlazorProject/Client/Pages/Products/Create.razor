@page "/Products/Create"
@using System.Net.Http.Headers;
@using BlazorProject.Shared.DTO;
@inject HttpClient http
@inject IToastService toastService
@inject NavigationManager NavigationManager
<div class="row bg-light shadow-lg">
    <div class="col-12">
       
        <br />
         <div class="col-12 d-flex justify-content-end mb-4 ">
            <a href="/Products/List" class="btn shadow btn-link">Back to list</a>
        </div>
        <br />
          <h3 class="text-center fw-bold text-secondary mb-4">Create Product</h3>
        <div class="justify-content-center col-10">
            <EditForm Model="@product" OnValidSubmit="SaveProduct">
               
                <DataAnnotationsValidator />
                <div class="form-group row mb-1">
                    <label class="col-form-label col-5 text-end" for="@product.ProductName">Product name</label>
                    <div class="col-6">
                        <InputText @bind-Value="product.ProductName" class="form-control" />
                        <ValidationMessage For="@(()=>product.ProductName)" class="text-danger" />
                    </div>
                </div>
                <div class="form-group row mb-1">
                    <label class="col-form-label col-5 text-end" for="@product.Price">Product price</label>
                    <div class="col-6">
                        <InputNumber @bind-Value="product.Price" class="form-control" />
                        <ValidationMessage For="@(()=>product.Price)" class="text-danger" />
                    </div>
                </div>
                <div class="form-group row mb-1">
                    <label class="col-form-label col-5 text-end" for="@product.ProductName">Picture</label>
                    <div class="col-6">
                        <InputFile OnChange="@OnInputFileChange" class="form-control" />
                        <input type="hidden" @bind="product.Picture" />
                        <ValidationMessage For="@(()=>product.Picture)" class="text-danger" />
                    </div>
                </div>
                <div class="form-group row mb-1">
                    <label class="col-form-label col-5 text-end" for="@product.IsAvailable">Available</label>
                    <div class="col-6 text-start">
                        <InputCheckbox @bind-Value="product.IsAvailable" class="m-2" />

                    </div>
                </div>
                <div class="form-group row mb-5 mt-4">

                    <div class="col-7 offset-5">
                        <button type="submit" class="btn btn-outline-primary  shadow">Save</button>

                    </div>
                </div>
            </EditForm>
        </div>
    </div>
   
    <br />
    <br />
</div>
@code {
    private ProductDTO product = new();
    IBrowserFile? selectedFile;
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        product.Picture = e.File.Name;

        //this.StateHasChanged();
    }
    private async Task SaveProduct()
    {
        if (product is not null)
        {


            var saveImage = await UploadItAsysnc();
            product.Picture = saveImage.StoredFileName;
            var response = await http.PostAsJsonAsync("api/Products", product);
            if (response.IsSuccessStatusCode)
            {
                toastService.ShowSuccess("Data saved successfully");
                product = new();
                NavigationManager.NavigateTo("/Products/List");
            }
            else
            {
                toastService.ShowError("Failed to data.");
            }

            
        }
    }
    private async Task<ImageUploadResponse> UploadItAsysnc()
    {
        using (var ms = new MemoryStream())
        {

            if (selectedFile is not null)
            {
                var content = new MultipartFormDataContent();
                var fileContent = new StreamContent(selectedFile.OpenReadStream(long.MaxValue));

                fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(content: fileContent, name: "\"file\"", fileName: selectedFile.Name);
                var response = await http.PostAsync("api/Products/Upload", content);
                var r = await response.Content.ReadFromJsonAsync<ImageUploadResponse>();
                return r == null ? new ImageUploadResponse() : r;
            }
            else
            {
                return new ImageUploadResponse();
            }

        }
    }
}
